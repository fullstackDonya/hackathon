{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from '../../utils/axiosConfig';\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get('/posts');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Erreur serveur');\n  }\n});\n\n// Async thunk pour récupérer un post par ID\nexport const fetchPostById = createAsyncThunk('posts/fetchPostById', async id => {\n  const response = await axios.get(`/post/${id}`);\n  return response.data;\n});\nexport const updatePost = createAsyncThunk('posts/updatePost', async ({\n  id,\n  postData\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.put(`/post/${id}`, postData, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Erreur serveur');\n  }\n});\nexport const deletePost = createAsyncThunk('posts/deletePost', async (id, {\n  rejectWithValue\n}) => {\n  try {\n    await axios.delete(`/post/${id}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return id;\n  } catch (error) {\n    var _error$response3;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'Erreur serveur');\n  }\n});\nconst postsSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    list: [],\n    currentPost: null,\n    // Ajout d'un champ pour stocker le post sélectionné\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.loading = true;\n    }).addCase(fetchPosts.fulfilled, (state, action) => {\n      state.loading = false;\n      state.list = action.payload;\n    }).addCase(fetchPosts.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n    // Ajout de la gestion de fetchPostById\n    .addCase(fetchPostById.pending, state => {\n      state.loading = true;\n    }).addCase(fetchPostById.fulfilled, (state, action) => {\n      state.loading = false;\n      state.currentPost = action.payload; // Stocke le post récupéré\n    }).addCase(fetchPostById.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default postsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchPosts","_","rejectWithValue","response","get","data","error","_error$response","fetchPostById","id","updatePost","postData","put","headers","Authorization","localStorage","getItem","_error$response2","deletePost","delete","_error$response3","postsSlice","name","initialState","list","currentPost","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/donyab/Downloads/Hackathon/frontend/my-react-app/src/redux/slices/postsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from '../../utils/axiosConfig';\n\nexport const fetchPosts = createAsyncThunk(\n    'posts/fetchPosts',\n    async (_, { rejectWithValue }) => {\n      try {\n        const response = await axios.get('/posts');\n        return response.data;\n      } catch (error) {\n        return rejectWithValue(error.response?.data || 'Erreur serveur');\n      }\n    }\n  );\n\n// Async thunk pour récupérer un post par ID\nexport const fetchPostById = createAsyncThunk(\n  'posts/fetchPostById',\n  async (id) => {\n    const response = await axios.get(`/post/${id}`);\n    return response.data;\n  }\n);\n  \nexport const updatePost = createAsyncThunk(\n    'posts/updatePost',\n    async ({ id, postData }, { rejectWithValue }) => {\n      try {\n        const response = await axios.put(`/post/${id}`, postData, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        return response.data;\n      } catch (error) {\n        return rejectWithValue(error.response?.data || 'Erreur serveur');\n      }\n    }\n  );\n  \nexport const deletePost = createAsyncThunk(\n    'posts/deletePost',\n    async (id, { rejectWithValue }) => {\n      try {\n        await axios.delete(`/post/${id}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n        return id;\n      } catch (error) {\n        return rejectWithValue(error.response?.data || 'Erreur serveur');\n      }\n    }\n  );\n  \n\n  const postsSlice = createSlice({\n    name: \"posts\",\n    initialState: {\n      list: [],\n      currentPost: null,  // Ajout d'un champ pour stocker le post sélectionné\n      loading: false,\n      error: null,\n    },\n    reducers: {},\n    extraReducers: (builder) => {\n      builder\n        .addCase(fetchPosts.pending, (state) => {\n          state.loading = true;\n        })\n        .addCase(fetchPosts.fulfilled, (state, action) => {\n          state.loading = false;\n          state.list = action.payload;\n        })\n        .addCase(fetchPosts.rejected, (state, action) => {\n          state.loading = false;\n          state.error = action.payload;\n        })\n        // Ajout de la gestion de fetchPostById\n        .addCase(fetchPostById.pending, (state) => {\n          state.loading = true;\n        })\n        .addCase(fetchPostById.fulfilled, (state, action) => {\n          state.loading = false;\n          state.currentPost = action.payload; // Stocke le post récupéré\n        })\n        .addCase(fetchPostById.rejected, (state, action) => {\n          state.loading = false;\n          state.error = action.payload;\n        });\n    },\n  });\n  \n  export default postsSlice.reducer;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}