{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"../../utils/axiosConfig\"; // Utiliser la config Axios\n\n// Récupérer les conversations de l'utilisateur connecté\nexport const fetchConversations = createAsyncThunk(\"conversations/fetchConversations\", async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  const {\n    userId,\n    token\n  } = getState().auth;\n  if (!userId || !token) {\n    return rejectWithValue(\"Utilisateur non connecté\");\n  }\n  try {\n    const response = await axios.get(`/conversations`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"Erreur serveur\");\n  }\n});\n\n// Créer une conversation\nexport const createConversation = createAsyncThunk(\"conversations/create\", async ({\n  senders\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  const token = localStorage.getItem('token');\n  const userId = localStorage.getItem('userId');\n  if (!userId || !token) {\n    return rejectWithValue(\"Utilisateur non connecté\");\n  }\n  try {\n    const response = await axios.post(\"/conversations\", {\n      senders\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    if (response.status !== 201) {\n      throw new Error(\"Erreur lors de la création de la conversation\");\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Erreur serveur\");\n  }\n});\nconst conversationSlice = createSlice({\n  name: \"conversations\",\n  initialState: {\n    conversations: [],\n    selectedConversationId: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    setSelectedConversationId: (state, action) => {\n      state.selectedConversationId = action.payload;\n    },\n    addMessageToConversation: (state, action) => {\n      const {\n        conversationId,\n        message\n      } = action.payload;\n      const conversation = state.conversations.find(conv => conv._id === conversationId);\n      if (conversation) {\n        conversation.messages.push(message);\n      }\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchConversations.pending, state => {\n      state.loading = true;\n    }).addCase(fetchConversations.fulfilled, (state, action) => {\n      state.loading = false;\n      state.conversations = action.payload;\n    }).addCase(fetchConversations.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(createConversation.fulfilled, (state, action) => {\n      state.conversations.push(action.payload);\n      state.selectedConversationId = action.payload._id;\n    });\n  }\n});\nexport const {\n  setSelectedConversationId,\n  addMessageToConversation\n} = conversationSlice.actions;\nexport default conversationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchConversations","_","getState","rejectWithValue","userId","token","auth","response","get","headers","Authorization","data","error","_error$response","createConversation","senders","localStorage","getItem","post","status","Error","_error$response2","_error$response2$data","message","conversationSlice","name","initialState","conversations","selectedConversationId","loading","reducers","setSelectedConversationId","state","action","payload","addMessageToConversation","conversationId","conversation","find","conv","_id","messages","push","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/donyab/Downloads/Hackathon/frontend/my-react-app/src/redux/slices/conversationSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"../../utils/axiosConfig\"; // Utiliser la config Axios\n\n// Récupérer les conversations de l'utilisateur connecté\nexport const fetchConversations = createAsyncThunk(\n  \"conversations/fetchConversations\",\n  async (_, { getState, rejectWithValue }) => {\n    const { userId, token } = getState().auth; \n    \n    if (!userId || !token) {\n      return rejectWithValue(\"Utilisateur non connecté\");\n    }\n\n    try {\n      const response = await axios.get(`/conversations`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data || \"Erreur serveur\");\n    }\n  }\n);\n\n// Créer une conversation\nexport const createConversation = createAsyncThunk(\n  \"conversations/create\",\n  async ({ senders }, { getState, rejectWithValue }) => {  \n    const token = localStorage.getItem('token');\n    const userId = localStorage.getItem('userId');\n\n    if (!userId || !token) {\n      return rejectWithValue(\"Utilisateur non connecté\");\n    }\n\n    try {\n      const response = await axios.post(\"/conversations\", { senders }, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      if (response.status !== 201) {\n        throw new Error(\"Erreur lors de la création de la conversation\");\n      }\n\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(error.response?.data?.message || \"Erreur serveur\");\n    }\n  }\n);\n\nconst conversationSlice = createSlice({\n  name: \"conversations\",\n  initialState: {\n    conversations: [],\n    selectedConversationId: null,\n    loading: false,\n    error: null,\n  },\n  reducers: {\n    setSelectedConversationId: (state, action) => {\n      state.selectedConversationId = action.payload;\n    },\n    addMessageToConversation: (state, action) => {\n      const { conversationId, message } = action.payload;\n      const conversation = state.conversations.find(conv => conv._id === conversationId);\n      if (conversation) {\n        conversation.messages.push(message);\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchConversations.pending, (state) => {\n        state.loading = true;\n      })\n      .addCase(fetchConversations.fulfilled, (state, action) => {\n        state.loading = false;\n        state.conversations = action.payload;\n      })\n      .addCase(fetchConversations.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload;\n      })\n      .addCase(createConversation.fulfilled, (state, action) => {\n        state.conversations.push(action.payload);\n        state.selectedConversationId = action.payload._id;\n      });\n  },\n});\n\nexport const { setSelectedConversationId, addMessageToConversation } = conversationSlice.actions;\nexport default conversationSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}